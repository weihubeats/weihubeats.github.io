"use strict";(self.webpackChunkweihubeats_website=self.webpackChunkweihubeats_website||[]).push([[3632],{286:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"MQ/RocketMQ/\u6e90\u7801\u5206\u6790/RocketMQ\u78c1\u76d8\u6838\u5fc3\u914d\u7f6e","title":"RocketMQ\u78c1\u76d8\u6838\u5fc3\u914d\u7f6e","description":"\u6838\u5fc3\u914d\u7f6e","source":"@site/docs/MQ/RocketMQ/\u6e90\u7801\u5206\u6790/RocketMQ\u78c1\u76d8\u6838\u5fc3\u914d\u7f6e.md","sourceDirName":"MQ/RocketMQ/\u6e90\u7801\u5206\u6790","slug":"/MQ/RocketMQ/\u6e90\u7801\u5206\u6790/RocketMQ\u78c1\u76d8\u6838\u5fc3\u914d\u7f6e","permalink":"/docs/MQ/RocketMQ/\u6e90\u7801\u5206\u6790/RocketMQ\u78c1\u76d8\u6838\u5fc3\u914d\u7f6e","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/MQ/RocketMQ/\u6e90\u7801\u5206\u6790/RocketMQ\u78c1\u76d8\u6838\u5fc3\u914d\u7f6e.md","tags":[],"version":"current","frontMatter":{},"sidebar":"RocketMQ","previous":{"title":"RocketMQ 5.x\u5fc3\u8df3\u673a\u5236\u4f18\u5316","permalink":"/docs/MQ/RocketMQ/\u6e90\u7801\u5206\u6790/RocketMQ 5.x\u5fc3\u8df3\u673a\u5236\u4f18\u5316"},"next":{"title":"RocketMQ\u78c1\u76d8\u6ee1\u4e86\u5f88\u614c\u4e0d\u77e5\u600e\u4e48\u529e\uff1f\u542c\u6211\u7ed9\u4f60\u6e90\u7801\u5206\u6790\u8fc7\u671f\u6587\u4ef6\u5982\u4f55\u5220\u9664","permalink":"/docs/MQ/RocketMQ/\u6e90\u7801\u5206\u6790/RocketMQ\u78c1\u76d8\u6ee1\u4e86\u5f88\u614c\u4e0d\u77e5\u600e\u4e48\u529e\uff1f\u542c\u6211\u7ed9\u4f60\u6e90\u7801\u5206\u6790\u8fc7\u671f\u6587\u4ef6\u5982\u4f55\u5220\u9664"}}');var o=t(4848),s=t(8453);const a={},l=void 0,r={},c=[{value:"\u6838\u5fc3\u914d\u7f6e",id:"\u6838\u5fc3\u914d\u7f6e",level:2},{value:"diskMaxUsedSpaceRatio",id:"diskmaxusedspaceratio",level:2},{value:"diskSpaceCleanForciblyRatio",id:"diskspacecleanforciblyratio",level:2}];function d(e){const i={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.h2,{id:"\u6838\u5fc3\u914d\u7f6e",children:"\u6838\u5fc3\u914d\u7f6e"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"diskMaxUsedSpaceRatio"}),"\n",(0,o.jsx)(i.li,{children:"diskSpaceWarningLevelRatio"}),"\n",(0,o.jsx)(i.li,{children:"diskSpaceCleanForciblyRatio"}),"\n"]}),"\n",(0,o.jsx)(i.h2,{id:"diskmaxusedspaceratio",children:"diskMaxUsedSpaceRatio"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"\u9ed8\u8ba4\u503c 75%"}),"\n",(0,o.jsx)(i.li,{children:"\u4f5c\u7528 \u78c1\u76d8\u8d85\u8fc775%\u8fdb\u884c\u6587\u4ef6\u5220\u9664"}),"\n"]}),"\n",(0,o.jsx)(i.h2,{id:"diskspacecleanforciblyratio",children:"diskSpaceCleanForciblyRatio"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"\u9ed8\u8ba4\u503c 85%"}),"\n"]}),"\n",(0,o.jsx)(i.p,{children:"\u78c1\u76d8\u7a7a\u95f4\u5f3a\u5236\u6e05\u6d01\u7387"}),"\n",(0,o.jsx)(i.p,{children:"\u6838\u5fc3\u65b9\u6cd5"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'        private boolean isSpaceToDelete() {\n            // \u662f\u5426\u7acb\u5373\u6e05\u7406\u6807\u5fd7\n            cleanImmediately = false;\n            // \u83b7\u53d6commitLog \u5b58\u50a8\u8def\u5f84\n            String commitLogStorePath = DefaultMessageStore.this.getMessageStoreConfig().getStorePathCommitLog();\n            // \u62c6\u5206\u4e3a\u591a\u4e2a\u5b58\u50a8\u8def\u5f84(\u652f\u6301\u591a\u78c1\u76d8)\n            String[] storePaths = commitLogStorePath.trim().split(MixAll.MULTI_PATH_SPLITTER);\n            // \u8bb0\u5f55\u5df2\u6ee1\u7684\u78c1\u76d8\u8def\u5f84\n            Set<String> fullStorePath = new HashSet<>();\n            // \u6700\u5c0f\u7269\u7406\u78c1\u76d8\u4f7f\u7528\u7387\uff08\u521d\u59cb100%\uff09\n            double minPhysicRatio = 100;\n            // \u4f7f\u7528\u7387\u6700\u4f4e\u7684\u78c1\u76d8\u8def\u5f84\n            String minStorePath = null;\n            for (String storePathPhysic : storePaths) {\n                // \u8ba1\u7b97\u5f53\u524d\u78c1\u76d8\u4f7f\u7528\u7387\n                double physicRatio = UtilAll.getDiskPartitionSpaceUsedPercent(storePathPhysic);\n\n                // \u8bb0\u5f55\u6700\u5c0f\u4f7f\u7528\u7387\u7684\u78c1\u76d8\n                if (minPhysicRatio > physicRatio) {\n                    minPhysicRatio = physicRatio;\n                    minStorePath = storePathPhysic;\n                }\n                // \u6807\u8bb0\u8d85\u8fc7\u5f3a\u5236\u6e05\u7406\u9608\u503c\u7684\u78c1\u76d8 \u5373\u4e0e diskSpaceCleanForciblyRatio(\u9ed8\u8ba485%)\u5bf9\u6bd4\n                if (physicRatio > getDiskSpaceCleanForciblyRatio()) {\n                    fullStorePath.add(storePathPhysic);\n                }\n            }\n            // \u5c06\u5df2\u6ee1\u78c1\u76d8\u8def\u5f84\u540c\u6b65\u7ed9CommitLog\n            DefaultMessageStore.this.commitLog.setFullStorePaths(fullStorePath);\n            // \u4e0e diskSpaceWarningLevelRatio(\u9ed8\u8ba490%)\u8fdb\u884c\u5bf9\u6bd4 \u78c1\u76d8\u662f\u5426\u5df2\u6ee1\n            if (minPhysicRatio > getDiskSpaceWarningLevelRatio()) {\n                // \u8d85\u8fc7\u9884\u8b66\u9608\u503c\uff1a\u6807\u8bb0\u78c1\u76d8\u6ee1 + \u7acb\u5373\u6e05\u7406\n                boolean diskFull = DefaultMessageStore.this.runningFlags.getAndMakeDiskFull();\n                if (diskFull) {\n                    DefaultMessageStore.LOGGER.error("physic disk maybe full soon " + minPhysicRatio +\n                        ", so mark disk full, storePathPhysic=" + minStorePath);\n                }\n\n                cleanImmediately = true;\n                return true;\n            } else if (minPhysicRatio > getDiskSpaceCleanForciblyRatio()) { // \u8d85\u8fc7\u5f3a\u5236\u6e05\u7406\u9608\u503c\uff1a\u7acb\u5373\u6e05\u7406\uff08\u4e0d\u6807\u8bb0\u78c1\u76d8\u6ee1\uff09\n                cleanImmediately = true;\n                return true;\n            } else {\n                // \u78c1\u76d8\u6b63\u5e38\uff1a\u6062\u590d\u53ef\u5199\u72b6\u6001\n                boolean diskOK = DefaultMessageStore.this.runningFlags.getAndMakeDiskOK();\n                if (!diskOK) {\n                    DefaultMessageStore.LOGGER.info("physic disk space OK " + minPhysicRatio +\n                        ", so mark disk ok, storePathPhysic=" + minStorePath);\n                }\n            }\n\n            // \u83b7\u53d6ConsumeQueue\u5b58\u50a8\u8def\u5f84\n            String storePathLogics = StorePathConfigHelper\n                .getStorePathConsumeQueue(DefaultMessageStore.this.getMessageStoreConfig().getStorePathRootDir());\n            double logicsRatio = UtilAll.getDiskPartitionSpaceUsedPercent(storePathLogics);\n            // \u4e0e diskSpaceWarningLevelRatio(\u9ed8\u8ba490%)\u8fdb\u884c\u5bf9\u6bd4 \u78c1\u76d8\u662f\u5426\u5df2\u6ee1\n            if (logicsRatio > getDiskSpaceWarningLevelRatio()) {\n                boolean diskOK = DefaultMessageStore.this.runningFlags.getAndMakeDiskFull();\n                if (diskOK) {\n                    DefaultMessageStore.LOGGER.error("logics disk maybe full soon " + logicsRatio + ", so mark disk full");\n                }\n\n                cleanImmediately = true;\n                return true;\n            } else if (logicsRatio > getDiskSpaceCleanForciblyRatio()) {\n                cleanImmediately = true;\n                return true;\n            } else {\n                boolean diskOK = DefaultMessageStore.this.runningFlags.getAndMakeDiskOK();\n                if (!diskOK) {\n                    DefaultMessageStore.LOGGER.info("logics disk space OK " + logicsRatio + ", so mark disk ok");\n                }\n            }\n            //  diskMaxUsedSpaceRatio \u9ed8\u8ba4 75%\n            double ratio = DefaultMessageStore.this.getMessageStoreConfig().getDiskMaxUsedSpaceRatio() / 100.0;\n            int replicasPerPartition = DefaultMessageStore.this.getMessageStoreConfig().getReplicasPerDiskPartition();\n            // Only one commitLog in node\n            if (replicasPerPartition <= 1) {\n                if (minPhysicRatio < 0 || minPhysicRatio > ratio) {\n                    DefaultMessageStore.LOGGER.info("commitLog disk maybe full soon, so reclaim space, " + minPhysicRatio);\n                    return true;\n                }\n\n                if (logicsRatio < 0 || logicsRatio > ratio) {\n                    DefaultMessageStore.LOGGER.info("consumeQueue disk maybe full soon, so reclaim space, " + logicsRatio);\n                    return true;\n                }\n                return false;\n            } else {\n                long majorFileSize = DefaultMessageStore.this.getMajorFileSize();\n                long partitionLogicalSize = UtilAll.getDiskPartitionTotalSpace(minStorePath) / replicasPerPartition;\n                double logicalRatio = 1.0 * majorFileSize / partitionLogicalSize;\n\n                if (logicalRatio > DefaultMessageStore.this.getMessageStoreConfig().getLogicalDiskSpaceCleanForciblyThreshold()) {\n                    // if logical ratio exceeds 0.80, then clean immediately\n                    DefaultMessageStore.LOGGER.info("Logical disk usage {} exceeds logical disk space clean forcibly threshold {}, forcibly: {}",\n                        logicalRatio, minPhysicRatio, cleanImmediately);\n                    cleanImmediately = true;\n                    return true;\n                }\n\n                boolean isUsageExceedsThreshold = logicalRatio > ratio;\n                if (isUsageExceedsThreshold) {\n                    DefaultMessageStore.LOGGER.info("Logical disk usage {} exceeds clean threshold {}, forcibly: {}",\n                        logicalRatio, ratio, cleanImmediately);\n                }\n                return isUsageExceedsThreshold;\n            }\n        }\n\n'})}),"\n",(0,o.jsxs)(i.p,{children:["\u5982\u679c\u78c1\u76d8\u8d85\u8fc785%,\u4f1a\u5c06\u8def\u5f84\u4e22\u5230 ",(0,o.jsx)(i.code,{children:"CommitLog"}),"\u4e2d\u7684",(0,o.jsx)(i.code,{children:"fullStorePaths"}),"\u4e2d"]}),"\n",(0,o.jsxs)(i.p,{children:["\u6765\u770b\u770b\u5bf9",(0,o.jsx)(i.code,{children:"fullStorePaths"}),"\u5c5e\u6027\u4f1a\u505a\u4ec0\u4e48\u64cd\u4f5c"]})]})}function u(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>a,x:()=>l});var n=t(6540);const o={},s=n.createContext(o);function a(e){const i=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);