"use strict";(self.webpackChunkweihubeats_website=self.webpackChunkweihubeats_website||[]).push([[3632],{286:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"MQ/RocketMQ/\u6e90\u7801\u5206\u6790/RocketMQ\u78c1\u76d8\u6838\u5fc3\u914d\u7f6e","title":"RocketMQ\u78c1\u76d8\u6838\u5fc3\u914d\u7f6e","description":"\u6838\u5fc3\u914d\u7f6e","source":"@site/docs/MQ/RocketMQ/\u6e90\u7801\u5206\u6790/RocketMQ\u78c1\u76d8\u6838\u5fc3\u914d\u7f6e.md","sourceDirName":"MQ/RocketMQ/\u6e90\u7801\u5206\u6790","slug":"/MQ/RocketMQ/\u6e90\u7801\u5206\u6790/RocketMQ\u78c1\u76d8\u6838\u5fc3\u914d\u7f6e","permalink":"/docs/MQ/RocketMQ/\u6e90\u7801\u5206\u6790/RocketMQ\u78c1\u76d8\u6838\u5fc3\u914d\u7f6e","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/MQ/RocketMQ/\u6e90\u7801\u5206\u6790/RocketMQ\u78c1\u76d8\u6838\u5fc3\u914d\u7f6e.md","tags":[],"version":"current","frontMatter":{},"sidebar":"RocketMQ","previous":{"title":"RocketMQ 5.x\u5fc3\u8df3\u673a\u5236\u4f18\u5316","permalink":"/docs/MQ/RocketMQ/\u6e90\u7801\u5206\u6790/RocketMQ 5.x\u5fc3\u8df3\u673a\u5236\u4f18\u5316"},"next":{"title":"RocketMQ\u78c1\u76d8\u6ee1\u4e86\u5f88\u614c\u4e0d\u77e5\u600e\u4e48\u529e\uff1f\u542c\u6211\u7ed9\u4f60\u6e90\u7801\u5206\u6790\u8fc7\u671f\u6587\u4ef6\u5982\u4f55\u5220\u9664","permalink":"/docs/MQ/RocketMQ/\u6e90\u7801\u5206\u6790/RocketMQ\u78c1\u76d8\u6ee1\u4e86\u5f88\u614c\u4e0d\u77e5\u600e\u4e48\u529e\uff1f\u542c\u6211\u7ed9\u4f60\u6e90\u7801\u5206\u6790\u8fc7\u671f\u6587\u4ef6\u5982\u4f55\u5220\u9664"}}');var s=i(4848),o=i(8453);const a={},l=void 0,r={},c=[{value:"\u6838\u5fc3\u914d\u7f6e",id:"\u6838\u5fc3\u914d\u7f6e",level:2},{value:"diskMaxUsedSpaceRatio",id:"diskmaxusedspaceratio",level:2},{value:"diskSpaceCleanForciblyRatio",id:"diskspacecleanforciblyratio",level:2}];function d(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"\u6838\u5fc3\u914d\u7f6e",children:"\u6838\u5fc3\u914d\u7f6e"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"diskMaxUsedSpaceRatio"}),"\n",(0,s.jsx)(t.li,{children:"diskSpaceWarningLevelRatio"}),"\n",(0,s.jsx)(t.li,{children:"diskSpaceCleanForciblyRatio"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"diskmaxusedspaceratio",children:"diskMaxUsedSpaceRatio"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"\u9ed8\u8ba4\u503c 75%"}),"\n",(0,s.jsx)(t.li,{children:"\u4f5c\u7528 \u78c1\u76d8\u8d85\u8fc775%\u8fdb\u884c\u6587\u4ef6\u5220\u9664"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"diskspacecleanforciblyratio",children:"diskSpaceCleanForciblyRatio"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"\u9ed8\u8ba4\u503c 85%"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"\u78c1\u76d8\u7a7a\u95f4\u5f3a\u5236\u6e05\u6d01\u7387"}),"\n",(0,s.jsx)(t.p,{children:"\u6838\u5fc3\u65b9\u6cd5"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'        private boolean isSpaceToDelete() {\n            cleanImmediately = false;\n\n            String commitLogStorePath = DefaultMessageStore.this.getMessageStoreConfig().getStorePathCommitLog();\n            String[] storePaths = commitLogStorePath.trim().split(MixAll.MULTI_PATH_SPLITTER);\n            Set<String> fullStorePath = new HashSet<>();\n            double minPhysicRatio = 100;\n            String minStorePath = null;\n            for (String storePathPhysic : storePaths) {\n                double physicRatio = UtilAll.getDiskPartitionSpaceUsedPercent(storePathPhysic);\n                if (minPhysicRatio > physicRatio) {\n                    minPhysicRatio = physicRatio;\n                    minStorePath = storePathPhysic;\n                }\n                if (physicRatio > getDiskSpaceCleanForciblyRatio()) {\n                    fullStorePath.add(storePathPhysic);\n                }\n            }\n            DefaultMessageStore.this.commitLog.setFullStorePaths(fullStorePath);\n            if (minPhysicRatio > getDiskSpaceWarningLevelRatio()) {\n                boolean diskFull = DefaultMessageStore.this.runningFlags.getAndMakeDiskFull();\n                if (diskFull) {\n                    DefaultMessageStore.LOGGER.error("physic disk maybe full soon " + minPhysicRatio +\n                        ", so mark disk full, storePathPhysic=" + minStorePath);\n                }\n\n                cleanImmediately = true;\n                return true;\n            } else if (minPhysicRatio > getDiskSpaceCleanForciblyRatio()) {\n                cleanImmediately = true;\n                return true;\n            } else {\n                boolean diskOK = DefaultMessageStore.this.runningFlags.getAndMakeDiskOK();\n                if (!diskOK) {\n                    DefaultMessageStore.LOGGER.info("physic disk space OK " + minPhysicRatio +\n                        ", so mark disk ok, storePathPhysic=" + minStorePath);\n                }\n            }\n\n            String storePathLogics = StorePathConfigHelper\n                .getStorePathConsumeQueue(DefaultMessageStore.this.getMessageStoreConfig().getStorePathRootDir());\n            double logicsRatio = UtilAll.getDiskPartitionSpaceUsedPercent(storePathLogics);\n            if (logicsRatio > getDiskSpaceWarningLevelRatio()) {\n                boolean diskOK = DefaultMessageStore.this.runningFlags.getAndMakeDiskFull();\n                if (diskOK) {\n                    DefaultMessageStore.LOGGER.error("logics disk maybe full soon " + logicsRatio + ", so mark disk full");\n                }\n\n                cleanImmediately = true;\n                return true;\n            } else if (logicsRatio > getDiskSpaceCleanForciblyRatio()) {\n                cleanImmediately = true;\n                return true;\n            } else {\n                boolean diskOK = DefaultMessageStore.this.runningFlags.getAndMakeDiskOK();\n                if (!diskOK) {\n                    DefaultMessageStore.LOGGER.info("logics disk space OK " + logicsRatio + ", so mark disk ok");\n                }\n            }\n\n            double ratio = DefaultMessageStore.this.getMessageStoreConfig().getDiskMaxUsedSpaceRatio() / 100.0;\n            int replicasPerPartition = DefaultMessageStore.this.getMessageStoreConfig().getReplicasPerDiskPartition();\n            // Only one commitLog in node\n            if (replicasPerPartition <= 1) {\n                if (minPhysicRatio < 0 || minPhysicRatio > ratio) {\n                    DefaultMessageStore.LOGGER.info("commitLog disk maybe full soon, so reclaim space, " + minPhysicRatio);\n                    return true;\n                }\n\n                if (logicsRatio < 0 || logicsRatio > ratio) {\n                    DefaultMessageStore.LOGGER.info("consumeQueue disk maybe full soon, so reclaim space, " + logicsRatio);\n                    return true;\n                }\n                return false;\n            } else {\n                long majorFileSize = DefaultMessageStore.this.getMajorFileSize();\n                long partitionLogicalSize = UtilAll.getDiskPartitionTotalSpace(minStorePath) / replicasPerPartition;\n                double logicalRatio = 1.0 * majorFileSize / partitionLogicalSize;\n\n                if (logicalRatio > DefaultMessageStore.this.getMessageStoreConfig().getLogicalDiskSpaceCleanForciblyThreshold()) {\n                    // if logical ratio exceeds 0.80, then clean immediately\n                    DefaultMessageStore.LOGGER.info("Logical disk usage {} exceeds logical disk space clean forcibly threshold {}, forcibly: {}",\n                        logicalRatio, minPhysicRatio, cleanImmediately);\n                    cleanImmediately = true;\n                    return true;\n                }\n\n                boolean isUsageExceedsThreshold = logicalRatio > ratio;\n                if (isUsageExceedsThreshold) {\n                    DefaultMessageStore.LOGGER.info("Logical disk usage {} exceeds clean threshold {}, forcibly: {}",\n                        logicalRatio, ratio, cleanImmediately);\n                }\n                return isUsageExceedsThreshold;\n            }\n        }\n\n'})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>l});var n=i(6540);const s={},o=n.createContext(s);function a(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);