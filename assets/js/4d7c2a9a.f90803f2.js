"use strict";(self.webpackChunkweihubeats_website=self.webpackChunkweihubeats_website||[]).push([[4016],{7283:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"MQ/Kafka/\u6700\u4f73\u5b9e\u8df5/spring boot\u4e2dkafka\u6d88\u606f\u7684\u987a\u5e8f\u53d1\u9001\u548c\u6d88\u8d39","title":"spring boot\u4e2dkafka\u6d88\u606f\u7684\u987a\u5e8f\u53d1\u9001\u548c\u6d88\u8d39","description":"\u6838\u5fc3\u4f9d\u8d56","source":"@site/docs/MQ/Kafka/\u6700\u4f73\u5b9e\u8df5/spring boot\u4e2dkafka\u6d88\u606f\u7684\u987a\u5e8f\u53d1\u9001\u548c\u6d88\u8d39.md","sourceDirName":"MQ/Kafka/\u6700\u4f73\u5b9e\u8df5","slug":"/MQ/Kafka/\u6700\u4f73\u5b9e\u8df5/spring boot\u4e2dkafka\u6d88\u606f\u7684\u987a\u5e8f\u53d1\u9001\u548c\u6d88\u8d39","permalink":"/docs/MQ/Kafka/\u6700\u4f73\u5b9e\u8df5/spring boot\u4e2dkafka\u6d88\u606f\u7684\u987a\u5e8f\u53d1\u9001\u548c\u6d88\u8d39","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/MQ/Kafka/\u6700\u4f73\u5b9e\u8df5/spring boot\u4e2dkafka\u6d88\u606f\u7684\u987a\u5e8f\u53d1\u9001\u548c\u6d88\u8d39.md","tags":[],"version":"current","frontMatter":{},"sidebar":"Kafka","previous":{"title":"kafka\u987a\u5e8f\u6d88\u606f\u7684\u4f7f\u7528\u53ca\u6ce8\u610f\u4e8b\u9879","permalink":"/docs/MQ/Kafka/\u6700\u4f73\u5b9e\u8df5/kafka\u987a\u5e8f\u6d88\u606f\u7684\u4f7f\u7528\u53ca\u6ce8\u610f\u4e8b\u9879"},"next":{"title":"\u804a\u804akafka client\u6027\u80fd\u8c03\u4f18\u53cakafka\u6700\u4f73\u5b9e\u8df5","permalink":"/docs/MQ/Kafka/\u6700\u4f73\u5b9e\u8df5/\u804a\u804akafka client\u6027\u80fd\u8c03\u4f18\u53cakafka\u6700\u4f73\u5b9e\u8df5"}}');var o=r(4848),t=r(8453);const i={},s=void 0,c={},p=[{value:"\u6838\u5fc3\u4f9d\u8d56",id:"\u6838\u5fc3\u4f9d\u8d56",level:2},{value:"\u914d\u7f6e",id:"\u914d\u7f6e",level:2},{value:"\u751f\u4ea7\u8005\u5b9e\u73b0",id:"\u751f\u4ea7\u8005\u5b9e\u73b0",level:2},{value:"\u6d88\u8d39\u8005\u5b9e\u73b0",id:"\u6d88\u8d39\u8005\u5b9e\u73b0",level:2},{value:"\u9ad8\u7ea7\u5b9e\u73b0",id:"\u9ad8\u7ea7\u5b9e\u73b0",level:2},{value:"\u7279\u5b9a\u5206\u533a\u76d1\u542c",id:"\u7279\u5b9a\u5206\u533a\u76d1\u542c",level:2}];function l(n){const e={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"\u6838\u5fc3\u4f9d\u8d56",children:"\u6838\u5fc3\u4f9d\u8d56"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-xml",children:"    <dependency>\n        <groupId>org.springframework.kafka</groupId>\n        <artifactId>spring-kafka</artifactId>\n    </dependency>\n\n"})}),"\n",(0,o.jsx)(e.h2,{id:"\u914d\u7f6e",children:"\u914d\u7f6e"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-yaml",children:"spring:\n  kafka:\n    bootstrap-servers: kafka1:9092,kafka2:9092,kafka3:9092\n    \n    # \u751f\u4ea7\u8005\u914d\u7f6e\n    producer:\n      # \u5e8f\u5217\u5316\u914d\u7f6e\n      key-serializer: org.apache.kafka.common.serialization.StringSerializer\n      value-serializer: org.apache.kafka.common.serialization.StringSerializer\n      # \u53ef\u9760\u6027\u914d\u7f6e\n      acks: all\n      retries: 3\n      properties:\n        # \u786e\u4fdd\u987a\u5e8f\u6027\u7684\u5173\u952e\u914d\u7f6e\n        max.in.flight.requests.per.connection: 1\n        # \u6027\u80fd\u4f18\u5316\u914d\u7f6e\n        batch.size: 16384\n        linger.ms: 5\n        buffer.memory: 33554432\n    \n    # \u6d88\u8d39\u8005\u914d\u7f6e\n    consumer:\n      # \u53cd\u5e8f\u5217\u5316\u914d\u7f6e\n      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer\n      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer\n      # \u6d88\u8d39\u8005\u7ec4ID\n      group-id: order-consumer-group\n      # \u504f\u79fb\u91cf\u63d0\u4ea4\u914d\u7f6e\n      enable-auto-commit: false\n      auto-offset-reset: earliest\n      # \u6279\u91cf\u62c9\u53d6\u914d\u7f6e\n      max-poll-records: 100\n      # \u4f1a\u8bdd\u8d85\u65f6\u914d\u7f6e\n      properties:\n        max.poll.interval.ms: 300000\n        session.timeout.ms: 30000\n        heartbeat.interval.ms: 10000\n    \n    # \u76d1\u542c\u5668\u914d\u7f6e\n    listener:\n      # \u624b\u52a8\u63d0\u4ea4\u6a21\u5f0f\n      ack-mode: MANUAL_IMMEDIATE\n      # \u5e76\u53d1\u914d\u7f6e\n      type: single\n      concurrency: 3\n\n# \u81ea\u5b9a\u4e49\u914d\u7f6e\napp:\n  kafka:\n    order-topic: order-topic\n\n"})}),"\n",(0,o.jsx)(e.p,{children:"\u6838\u5fc3\u914d\u7f6e"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"max.in.flight.requests.per.connection: \u5ba2\u6237\u7aef\u5728\u5355\u4e2a\u8fde\u63a5\u4e0a\u80fd\u591f\u53d1\u9001\u4f46\u5c1a\u672a\u6536\u5230\u670d\u52a1\u5668\u54cd\u5e94\u7684\u8bf7\u6c42\u6570\u91cf\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u5b83\u51b3\u5b9a\u4e86\u6bcf\u4e2a\u8fde\u63a5\u7684\u6700\u5927\u672a\u786e\u8ba4\u8bf7\u6c42\u6570.\u5982\u679c\u9700\u8981\u6d88\u606f\u7684\u987a\u5e8f\uff0c\u5fc5\u987b\u8bbe\u7f6e\u4e3a1.\u5982\u679c\u5927\u4e8e1\uff0c\u6d88\u606f\u8fdb\u884c\u91cd\u8bd5\u4f1a\u51fa\u73b0\u4e71\u5e8f"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"\u751f\u4ea7\u8005\u5b9e\u73b0",children:"\u751f\u4ea7\u8005\u5b9e\u73b0"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'package com.example.kafka.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.kafka.support.SendResult;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.concurrent.ListenableFuture;\nimport org.springframework.util.concurrent.ListenableFutureCallback;\n\n@Service\n@Slf4j\npublic class OrderedMessageProducer {\n\n    private final KafkaTemplate<String, String> kafkaTemplate;\n    private final String orderTopic;\n    \n    public OrderedMessageProducer(\n            KafkaTemplate<String, String> kafkaTemplate,\n            @Value("${app.kafka.order-topic}") String orderTopic) {\n        this.kafkaTemplate = kafkaTemplate;\n        this.orderTopic = orderTopic;\n    }\n    \n    /**\n     * \u53d1\u9001\u987a\u5e8f\u6d88\u606f - \u4f7f\u7528\u4e1a\u52a1\u952e\u4f5c\u4e3a\u6d88\u606fkey\u786e\u4fdd\u5206\u533a\u987a\u5e8f\n     * @param orderKey \u4e1a\u52a1\u952e(\u5982\u8ba2\u5355ID)\n     * @param message \u6d88\u606f\u5185\u5bb9\n     * @return \u53d1\u9001\u7ed3\u679cFuture\n     */\n    public ListenableFuture<SendResult<String, String>> sendOrderedMessage(String orderKey, String message) {\n        ListenableFuture<SendResult<String, String>> future = kafkaTemplate.send(orderTopic, orderKey, message);\n        \n        future.addCallback(new ListenableFutureCallback<SendResult<String, String>>() {\n            @Override\n            public void onSuccess(SendResult<String, String> result) {\n                log.info("\u6d88\u606f\u53d1\u9001\u6210\u529f: topic={}, key={}, partition={}, offset={}", \n                         result.getRecordMetadata().topic(),\n                         orderKey,\n                         result.getRecordMetadata().partition(),\n                         result.getRecordMetadata().offset());\n            }\n            \n            @Override\n            public void onFailure(Throwable ex) {\n                log.error("\u6d88\u606f\u53d1\u9001\u5931\u8d25: key={}, message={}", orderKey, message, ex);\n            }\n        });\n        \n        return future;\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"\u6d88\u8d39\u8005\u5b9e\u73b0",children:"\u6d88\u8d39\u8005\u5b9e\u73b0"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'package com.example.kafka.consumer;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.common.TopicPartition;\nimport org.springframework.kafka.annotation.KafkaListener;\nimport org.springframework.kafka.annotation.TopicPartition;\nimport org.springframework.kafka.listener.ConsumerSeekAware;\nimport org.springframework.kafka.support.Acknowledgment;\nimport org.springframework.stereotype.Service;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n@Service\n@Slf4j\npublic class OrderMessageConsumer implements ConsumerSeekAware {\n    // \u8bb0\u5f55\u5904\u7406\u72b6\u6001\uff0c\u751f\u4ea7\u73af\u5883\u5e94\u8003\u8651\u4f7f\u7528\u9650\u5236\u5927\u5c0f\u7684\u7f13\u5b58\n    private final Map<String, String> processedOrderStatus = new ConcurrentHashMap<>();\n    \n    /**\n     * \u76d1\u542c\u8ba2\u5355\u4e3b\u9898\u6d88\u606f\n     * Spring Kafka\u4f1a\u786e\u4fdd\u540c\u4e00\u5206\u533a\u7684\u6d88\u606f\u4f9d\u6b21\u5206\u53d1\u7ed9\u540c\u4e00\u4e2a\u5b9e\u4f8b\u7684\u540c\u4e00\u7ebf\u7a0b\u5904\u7406\n     */\n    @KafkaListener(\n            topics = "${app.kafka.order-topic}",\n            containerFactory = "kafkaListenerContainerFactory"\n    )\n    public void consumeOrderMessage(ConsumerRecord<String, String> record, Acknowledgment ack) {\n        String orderKey = record.key();\n        String message = record.value();\n        \n        try {\n            log.info("\u6536\u5230\u8ba2\u5355\u6d88\u606f: partition={}, offset={}, key={}, value={}",\n                    record.partition(), record.offset(), orderKey, message);\n            \n            // \u5904\u7406\u6d88\u606f - \u8fd9\u91cc\u5b9e\u73b0\u60a8\u7684\u4e1a\u52a1\u903b\u8f91\n            processOrderMessage(orderKey, message);\n            \n            // \u5b8c\u6210\u540e\u624b\u52a8\u786e\u8ba4\n            ack.acknowledge();\n            \n            log.info("\u8ba2\u5355\u6d88\u606f\u5904\u7406\u5b8c\u6210: key={}", orderKey);\n        } catch (Exception e) {\n            // \u751f\u4ea7\u73af\u5883\u5e94\u8be5\u6709\u66f4\u5b8c\u5584\u7684\u5f02\u5e38\u5904\u7406\u903b\u8f91\n            log.error("\u5904\u7406\u8ba2\u5355\u6d88\u606f\u5f02\u5e38: key={}", orderKey, e);\n            \n            // \u8fd9\u91cc\u53ef\u4ee5\u9009\u62e9\u4e0d\u786e\u8ba4\uff0c\u8ba9\u6d88\u606f\u91cd\u65b0\u6d88\u8d39 \n            // \u6216\u8005\u8bb0\u5f55\u5230\u6b7b\u4fe1\u961f\u5217\uff0c\u53d6\u51b3\u4e8e\u4e1a\u52a1\u9700\u6c42\n            // ack.nack(Duration.ofMillis(5000)); // \u5ef6\u8fdf5\u79d2\u540e\u91cd\u8bd5\n        }\n    }\n    \n    private void processOrderMessage(String orderKey, String message) {\n        // \u5904\u7406\u4e1a\u52a1\u903b\u8f91\n        // \u5728\u8fd9\u91cc\u5b9e\u73b0\u5206\u533a\u5185\u6d88\u606f\u7684\u6709\u5e8f\u5904\u7406\n        \n        // \u6a21\u62df\u5904\u7406\u8017\u65f6\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n        \n        // \u8bb0\u5f55\u5904\u7406\u72b6\u6001\n        processedOrderStatus.put(orderKey, message);\n    }\n    @Override\n    public void onPartitionsAssigned(Map<TopicPartition, Long> assignments, ConsumerSeekCallback callback) {\n        // \u53ef\u9009\uff1a\u5206\u533a\u5206\u914d\u65f6\u7684\u56de\u8c03\u5904\u7406\n        log.info("\u5206\u533a\u5df2\u5206\u914d: {}", assignments);\n    }\n    @Override\n    public void registerSeekCallback(ConsumerSeekCallback callback) {\n        // \u53ef\u9009\uff1a\u6ce8\u518cseek\u56de\u8c03\n    }\n    @Override\n    public void onIdleContainer(Map<TopicPartition, Long> assignments, ConsumerSeekCallback callback) {\n        // \u53ef\u9009\uff1a\u5bb9\u5668\u7a7a\u95f2\u65f6\u7684\u56de\u8c03\n    }\n}\n\n'})}),"\n",(0,o.jsx)(e.h2,{id:"\u9ad8\u7ea7\u5b9e\u73b0",children:"\u9ad8\u7ea7\u5b9e\u73b0"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'package com.example.kafka.config;\n\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\nimport org.springframework.kafka.core.ConsumerFactory;\nimport org.springframework.kafka.core.DefaultKafkaConsumerFactory;\nimport org.springframework.kafka.listener.ContainerProperties;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Configuration\npublic class KafkaConsumerConfig {\n\n    @Value("${spring.kafka.bootstrap-servers}")\n    private String bootstrapServers;\n    \n    @Value("${spring.kafka.consumer.group-id}")\n    private String groupId;\n    \n    @Bean\n    public ConsumerFactory<String, String> consumerFactory() {\n        Map<String, Object> props = new HashMap<>();\n        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, false);\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");\n        props.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, 100);\n        props.put(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG, 300000);\n        props.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, 30000);\n        props.put(ConsumerConfig.HEARTBEAT_INTERVAL_MS_CONFIG, 10000);\n        \n        return new DefaultKafkaConsumerFactory<>(props);\n    }\n    \n    @Bean\n    public ConcurrentKafkaListenerContainerFactory<String, String> kafkaListenerContainerFactory() {\n        ConcurrentKafkaListenerContainerFactory<String, String> factory = new ConcurrentKafkaListenerContainerFactory<>();\n        factory.setConsumerFactory(consumerFactory());\n        \n        // \u914d\u7f6e\u624b\u52a8\u786e\u8ba4\u6a21\u5f0f\n        factory.getContainerProperties().setAckMode(ContainerProperties.AckMode.MANUAL_IMMEDIATE);\n        \n        // \u914d\u7f6e\u5e76\u53d1\u6027 - \u5173\u952e\u8bbe\u7f6e\n        // \u6bcf\u4e2a\u5206\u533a\u5206\u914d\u4e00\u4e2a\u7ebf\u7a0b\u5904\u7406\uff0c\u4fdd\u8bc1\u5206\u533a\u5185\u987a\u5e8f\u6d88\u8d39\n        factory.setConcurrency(3); // \u5e94\u7b49\u4e8e\u6216\u5c0f\u4e8e\u5206\u533a\u6570\n        \n        // \u53ef\u9009\uff1a\u6d88\u606f\u6279\u5904\u7406\n        factory.setBatchListener(false);\n        \n        // \u53ef\u9009\uff1a\u6d88\u606f\u8fc7\u6ee4\u5668\n        // factory.setRecordFilterStrategy(record -> false); // \u8fd4\u56detrue\u8868\u793a\u8fc7\u6ee4\n        \n        return factory;\n    }\n}\n'})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'package com.example.kafka.config;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\nimport org.springframework.kafka.core.ConsumerFactory;\nimport org.springframework.kafka.core.DefaultKafkaConsumerFactory;\nimport org.springframework.kafka.listener.ContainerProperties;\nimport org.springframework.kafka.listener.KafkaMessageListenerContainer;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Configuration\n@Slf4j\npublic class AdvancedKafkaConsumerConfig {\n\n    @Value("${spring.kafka.bootstrap-servers}")\n    private String bootstrapServers;\n    \n    @Value("${spring.kafka.consumer.group-id}")\n    private String groupId;\n    \n    /**\n     * \u7279\u5b9a\u5206\u533a\u7684\u6d88\u8d39\u8005\u5de5\u5382\n     */\n    @Bean\n    public ConcurrentKafkaListenerContainerFactory<String, String> partitionAwareListenerContainerFactory() {\n        ConcurrentKafkaListenerContainerFactory<String, String> factory = new ConcurrentKafkaListenerContainerFactory<>();\n        factory.setConsumerFactory(consumerFactory());\n        factory.getContainerProperties().setAckMode(ContainerProperties.AckMode.MANUAL_IMMEDIATE);\n        \n        // \u5173\u952e\u8bbe\u7f6e\uff1a\u6bcf\u4e2a\u6d88\u8d39\u8005\u5b9e\u4f8b\u5355\u7ebf\u7a0b\u5904\u7406\n        factory.setConcurrency(1);\n        \n        // \u8bbe\u7f6e\u6d88\u606f\u76d1\u542c\u5668\u521b\u5efa\u7684\u81ea\u5b9a\u4e49\u56de\u8c03\n        factory.setContainerCustomizer(container -> {\n            container.getContainerProperties().setConsumerRebalanceListener(new OrderedRebalanceListener());\n            \n            // \u53ef\u6dfb\u52a0\u5176\u4ed6\u81ea\u5b9a\u4e49\u903b\u8f91\uff0c\u5982\u76d1\u63a7\u6216\u65e5\u5fd7\u8bb0\u5f55\n            if (container instanceof KafkaMessageListenerContainer) {\n                log.info("\u914d\u7f6e\u6d88\u606f\u76d1\u542c\u5bb9\u5668: {}", container);\n            }\n        });\n        \n        return factory;\n    }\n    \n    @Bean\n    public ConsumerFactory<String, String> consumerFactory() {\n        Map<String, Object> props = new HashMap<>();\n        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, false);\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");\n        \n        // \u5206\u533a\u5206\u914d\u7b56\u7565 - \u53ef\u9009\u914d\u7f6e\n        // props.put(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG, "org.apache.kafka.clients.consumer.RoundRobinAssignor");\n        \n        return new DefaultKafkaConsumerFactory<>(props);\n    }\n}\n\n'})}),"\n",(0,o.jsx)(e.h2,{id:"\u7279\u5b9a\u5206\u533a\u76d1\u542c",children:"\u7279\u5b9a\u5206\u533a\u76d1\u542c"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Service\n@Slf4j\npublic class PartitionSpecificConsumer {\n    /**\n     * \u76d1\u542c\u6307\u5b9a\u5206\u533a\u7684\u6d88\u606f\n     */\n    @KafkaListener(\n            topicPartitions = @TopicPartition(\n                    topic = "${app.kafka.order-topic}",\n                    partitions = {"0", "1", "2"}\n            ),\n            containerFactory = "partitionAwareListenerContainerFactory"\n    )\n    public void listenToPartition(ConsumerRecord<String, String> record, Acknowledgment ack) {\n        try {\n            log.info("\u5206\u533a\u4e13\u7528\u6d88\u8d39\u8005\u63a5\u6536\u5230\u6d88\u606f: partition={}, offset={}, key={}", \n                    record.partition(), record.offset(), record.key());\n            \n            // \u5904\u7406\u6d88\u606f\n            processMessage(record);\n            \n            // \u624b\u52a8\u786e\u8ba4\n            ack.acknowledge();\n        } catch (Exception e) {\n            log.error("\u5904\u7406\u7279\u5b9a\u5206\u533a\u6d88\u606f\u5931\u8d25", e);\n            // \u53ef\u4ee5\u9009\u62e9\u4e0d\u786e\u8ba4\u6216\u5ef6\u8fdf\u786e\u8ba4\n        }\n    }\n    \n    private void processMessage(ConsumerRecord<String, String> record) {\n        // \u5b9e\u73b0\u4e1a\u52a1\u903b\u8f91\n        String key = record.key();\n        String value = record.value();\n        \n        // \u5904\u7406\u903b\u8f91\n        log.info("\u5904\u7406\u8ba2\u5355\u6d88\u606f: key={}, value={}", key, value);\n        \n        // \u6a21\u62df\u5904\u7406\u65f6\u95f4\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}\n\n'})})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(l,{...n})}):l(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>i,x:()=>s});var a=r(6540);const o={},t=a.createContext(o);function i(n){const e=a.useContext(t);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),a.createElement(t.Provider,{value:e},n.children)}}}]);